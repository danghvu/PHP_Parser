%{
?><?
/*
   +----------------------------------------------------------------------+
   | Based on the Zend Engine                                             |
   +----------------------------------------------------------------------+
   | Copyright (c) 1998-2002 Zend Technologies Ltd. (http://www.zend.com) |
   +----------------------------------------------------------------------+
   | This source file is subject to version 2.00 of the Zend license,     |
   | that is bundled with this package in the file LICENSE, and is        | 
   | available at through the world-wide-web at                           |
   | http://www.zend.com/license/2_00.txt.                                |
   | If you did not receive a copy of the Zend license and are unable to  |
   | obtain it through the world-wide-web, please send a note to          |
   | license@zend.com so we can mail you a copy immediately.              |
   +----------------------------------------------------------------------+
   | Authors: Andi Gutmans <andi@zend.com>                                |
   |          Zeev Suraski <zeev@zend.com>                                |
   | native PHP version:  Alan Knowles <alan@akbkhome.com>                |
   +----------------------------------------------------------------------+
*/


/*
* This does nothing on it's own - refer to PHP_Parser
* It's purely the code for the Parser, generated by phpJay
*/
 

class PHP_Parser_Core {
        
    /**
     * Options, 
     *
     */
    var $_options = array();
    
    function PHP_Parser_Core($options = array())
    {
        $this->_options['classContainer'] =
        $this->_options['includeContainer'] =
        $this->_options['functionContainer'] =
        $this->_options['globalContainer'] =
        $this->_options['varContainer'] =
        $this->_options['constContainer'] =
        $this->_options['classConstContainer'] =
        $this->_options['methodContainer'] =
        $this->_options['publisher'] =
        $this->_options['publishMethod'] =
        $this->_options['publishMessageClass'] =
        $this->_options['publishClasses'] =
        $this->_options['publishClassMessage'] =
        $this->_options['publishIncludes'] =
        $this->_options['publishIncludeMessage'] =
        $this->_options['publishFunctions'] =
        $this->_options['publishFunctionMessage'] =
        $this->_options['publishGlobals'] =
        $this->_options['publishGlobalMessage'] =
        $this->_options['publishVars'] =
        $this->_options['publishVarMessage'] =
        $this->_options['publishClassConsts'] =
        $this->_options['publishClassConstMessage'] =
        $this->_options['publishMethods'] =
        $this->_options['publishMethodMessage'] =
        $this->_options['publishConsts'] =
        $this->_options['publishConstMessage'] =
        false;
        $this->_options = array_merge($this->_options, $options);
        if (!class_exists($this->_options['classContainer'])) {
            $this->_options['classContainer'] = false;
        }
        if (!class_exists($this->_options['includeContainer'])) {
            $this->_options['includeContainer'] = false;
        }
        if (!class_exists($this->_options['functionContainer'])) {
            $this->_options['functionContainer'] = false;
        }
        if (!class_exists($this->_options['globalContainer'])) {
            $this->_options['globalContainer'] = false;
        }
        if (!class_exists($this->_options['varContainer'])) {
            $this->_options['varContainer'] = false;
        }
        if (!class_exists($this->_options['constContainer'])) {
            $this->_options['constContainer'] = false;
        }
        if (!class_exists($this->_options['classConstContainer'])) {
            $this->_options['classConstContainer'] = false;
        }
        if (!class_exists($this->_options['methodContainer'])) {
            $this->_options['methodContainer'] = false;
        }
        if (!is_object($this->_options['publisher'])) {
            $this->_options['publisher'] = false;
        } else {
            if (!method_exists($this->_options['publisher'], $this->_options['publishMethod'])) {
                $this->_options['publishMethod'] = false;
                if (!method_exists($this->_options['publisher'], 'publish')) {
                    $this->_options['publisher'] = false;
                } else {
                    $this->_options['publishMethod'] = 'publish';
                }
            } else {
                if (!class_exists($this->_options['publishMessageClass'])) {
                    $this->_options['publishMessageClass'] = false;
                }
            }
        }
    }

    /**
     * array of classes => array(methods => ...., vars => ....)
     *
     * @var array
     * @access public 
     */

    var $classes = array();

   /**
    * array of includes
    *
    * @var array
    * @access public 
    */
    var $includes = array();

    /**
     * array of functions
     *
     * @var array
     * @access public 
     */
    var $functions = array();
    /**
     * array of constants
     *
     * @var array
     * @access public 
     */
    var $constants = array();
     /**
     * array of interfaces
     *
     * @var array
     * @access public 
     */
     
    var $interfaces = array();
     /**
     * array of globals
     *
     * @var array
     * @access public 
     */
    var $globals = array();
    /**
     * global variable name of parser arrays
     * should match the build options  
     *
     * @var string
     * @access public 
     */
    var $yyGlobalName = '_PHP_PARSER';


%}


%token	T_INCLUDE	257
%token	T_INCLUDE_ONCE	258
%token	T_EVAL	259
%token	T_REQUIRE	260
%token	T_REQUIRE_ONCE	261
%token	T_LOGICAL_OR	262
%token	T_LOGICAL_XOR	263
%token	T_LOGICAL_AND	264
%token	T_PRINT	265
%token	T_PLUS_EQUAL	266
%token	T_MINUS_EQUAL	267
%token	T_MUL_EQUAL	268
%token	T_DIV_EQUAL	269
%token	T_CONCAT_EQUAL	270
%token	T_MOD_EQUAL	271
%token	T_AND_EQUAL	272
%token	T_OR_EQUAL	273
%token	T_XOR_EQUAL	274
%token	T_SL_EQUAL	275
%token	T_SR_EQUAL	276
%token	T_BOOLEAN_OR	277
%token	T_BOOLEAN_AND	278
%token	T_IS_EQUAL	279
%token	T_IS_NOT_EQUAL	280
%token	T_IS_IDENTICAL	281
%token	T_IS_NOT_IDENTICAL	282
%token	T_IS_SMALLER_OR_EQUAL	283
%token	T_IS_GREATER_OR_EQUAL	284
%token	T_SL	285
%token	T_SR	286
%token	T_INC	287
%token	T_DEC	288
%token	T_INT_CAST	289
%token	T_DOUBLE_CAST	290
%token	T_STRING_CAST	291
%token	T_ARRAY_CAST	292
%token	T_OBJECT_CAST	293
%token	T_BOOL_CAST	294
%token	T_UNSET_CAST	295
%token	T_NEW	296
%token	T_EXIT	297
%token	T_IF	298
%token	T_ELSEIF	299
%token	T_ELSE	300
%token	T_ENDIF	301
%token	T_LNUMBER	302
%token	T_DNUMBER	303
%token	T_STRING	304
%token	T_STRING_VARNAME	305
%token	T_VARIABLE	306
%token	T_NUM_STRING	307
%token	T_INLINE_HTML	308
%token	T_CHARACTER	309
%token	T_BAD_CHARACTER	310
%token	T_ENCAPSED_AND_WHITESPACE	311
%token	T_CONSTANT_ENCAPSED_STRING	312
%token	T_ECHO	313
%token	T_DO	314
%token	T_WHILE	315
%token	T_ENDWHILE	316
%token	T_FOR	317
%token	T_ENDFOR	318
%token	T_FOREACH	319
%token	T_ENDFOREACH	320
%token	T_DECLARE	321
%token	T_ENDDECLARE	322
%token	T_AS	323
%token	T_SWITCH	324
%token	T_ENDSWITCH	325
%token	T_CASE	326
%token	T_DEFAULT	327
%token	T_BREAK	328
%token	T_CONTINUE	329
%token	T_OLD_FUNCTION	330
%token	T_FUNCTION	331
%token	T_CONST	332
%token	T_RETURN	333
%token	T_USE	334
%token	T_GLOBAL	335
%token	T_STATIC	336
%token	T_VAR	337
%token	T_UNSET	338
%token	T_ISSET	339
%token	T_EMPTY	340
%token	T_CLASS	341
%token	T_EXTENDS	342
%token	T_OBJECT_OPERATOR	343
%token	T_DOUBLE_ARROW	344
%token	T_LIST	345
%token	T_ARRAY	346
%token	T_CLASS_C	347
%token	T_FUNC_C	348
%token	T_LINE	349
%token	T_FILE	350
%token	T_COMMENT	351
%token	T_ML_COMMENT	352
%token	T_OPEN_TAG	353
%token	T_OPEN_TAG_WITH_ECHO	354
%token	T_CLOSE_TAG	355
%token	T_WHITESPACE	356
%token	T_START_HEREDOC	357
%token	T_END_HEREDOC	358
%token	T_DOLLAR_OPEN_CURLY_BRACES	359
%token	T_CURLY_OPEN	360
%token	T_PAAMAYIM_NEKUDOTAYIM	361





 

%left T_INCLUDE T_INCLUDE_ONCE T_EVAL T_REQUIRE T_REQUIRE_ONCE
%left ','
%left T_LOGICAL_OR
%left T_LOGICAL_XOR
%left T_LOGICAL_AND
%right T_PRINT
%left '=' T_PLUS_EQUAL T_MINUS_EQUAL T_MUL_EQUAL T_DIV_EQUAL T_CONCAT_EQUAL T_MOD_EQUAL T_AND_EQUAL T_OR_EQUAL T_XOR_EQUAL T_SL_EQUAL T_SR_EQUAL
%left '?' ':'
%left T_BOOLEAN_OR
%left T_BOOLEAN_AND
%left '|'
%left '^'
%left '&'
%nonassoc T_IS_EQUAL T_IS_NOT_EQUAL T_IS_IDENTICAL T_IS_NOT_IDENTICAL
%nonassoc '<' T_IS_SMALLER_OR_EQUAL '>' T_IS_GREATER_OR_EQUAL
%left T_SL T_SR
%left '+' '-' '.'
%left '*' '/' '%'
%right '!' '~' T_INC T_DEC T_INT_CAST T_DOUBLE_CAST T_STRING_CAST T_ARRAY_CAST T_OBJECT_CAST T_BOOL_CAST T_UNSET_CAST '@'
%right '['
%nonassoc T_NEW
 
%left T_ELSEIF
%left T_ELSE
%left T_ENDIF
 

%start top_statement_list

%% /* Rules */



top_statement_list:
		top_statement_list  {   } top_statement {   }
	|	/* empty */
;


top_statement:
		statement
	|	declaration_statement	{   }
;


inner_statement_list:
		inner_statement_list  {  } inner_statement {   }
	|	/* empty */
;


inner_statement:
		statement
	|	declaration_statement
;


statement:
		unticked_statement {   }
;


unticked_statement:
		'{' inner_statement_list '}'
	|	T_IF '(' expr ')'  statement  elseif_list else_single 
	|	T_IF '(' expr ')' ':'  inner_statement_list  new_elseif_list new_else_single T_ENDIF ';' 
	|	T_WHILE '(' expr  ')'  while_statement 
	|	T_DO  statement T_WHILE '('  expr ')' ';' 
	|	T_FOR 
			'('
				for_expr
			';' 
				for_expr
			';' 
				for_expr
			')' 
			for_statement 
	|	T_SWITCH '(' expr ')'	 switch_case_list 
	|	T_BREAK ';'				
	|	T_BREAK expr ';'		
	|	T_CONTINUE ';'			
	|	T_CONTINUE expr ';'		
	|	T_RETURN ';'						
	|	T_RETURN expr_without_variable ';'	
	|	T_RETURN cvar ';'					
	|	T_GLOBAL global_var_list ';'
	|	T_STATIC static_var_list ';'
	|	T_ECHO echo_expr_list ';'
	|	T_INLINE_HTML			
	|	expr ';'				
	|	T_USE use_filename ';'		
	|	T_UNSET '(' unset_variables ')' ';'
	|	T_FOREACH '(' w_cvar T_AS {  /* do stuff */ } w_cvar foreach_optional_arg ')' {  /* do stuff */  } foreach_statement {  /* do stuff */  }
	|	T_FOREACH '(' expr_without_variable T_AS {  /* do stuff */ } w_cvar foreach_optional_arg ')' {  /* do stuff */  } foreach_statement {  /* do stuff */  }
	|	T_DECLARE {  /* do stuff */  } '(' declare_list ')' declare_statement {  /* do stuff */ }
	|	';'		/* empty statement */
;

unset_variables:
		unset_variable
	|	unset_variables ',' unset_variable
;

unset_variable:
		cvar	{  /* do stuff */  }
;

use_filename:
		T_CONSTANT_ENCAPSED_STRING			{ $$ = $1; }
	|	'(' T_CONSTANT_ENCAPSED_STRING ')'	{ $$ = $2; }
;


declaration_statement:
		unticked_declaration_statement	{ /* do stuff */  }
;


unticked_declaration_statement:
		T_FUNCTION {  
                $this->functionLine = $this->yyLex->line; 
                $this->functionPos = $this->yyLex->pos; 
                $this->functionComment = $this->yyLex->lastComment;
                $this->functionCommentToken = $this->yyLex->lastCommentToken;
                
            } is_reference T_STRING  
			'(' parameter_list ')' '{' inner_statement_list '}' { 
                $this->functions[$4] = array(
                    'name'=>$4,
                    'args' => $6
            ); 
            
            
            
            }
	|	T_OLD_FUNCTION   is_reference T_STRING parameter_list '(' inner_statement_list ')' ';'  
	|	T_CLASS T_STRING { 
            $this->methods = array(); 
            $this->vars = array(); 
            $this->referencedVars = array();
        }
        '{' class_statement_list '}' {  
                $this->classes[$2] = array(
                    'name'              => $2,
                    'methods'           => $this->methods,
                    'vars'              => $this->vars,
                    'referencedVars'    => $this->referencedVars
                ); 
        }
	|	T_CLASS T_STRING T_EXTENDS T_STRING { 
            $this->methods = array(); 
            $this->vars = array(); 
            $this->referencedVars = array();
        }
        '{' class_statement_list '}' {
            $this->classes[$2] = array(
                'name'              => $2,
                'extends'           => $4,
                'methods'           =>$this->methods,
                'vars'              => $this->vars,
                'referencedVars'    => $this->referencedVars
            ); 
        }
;


foreach_optional_arg:
		/* empty */				{  /* do stuff */  }
	|	T_DOUBLE_ARROW w_cvar	{ $$ = $2; }
;


for_statement:
		statement
	|	':' inner_statement_list T_ENDFOR ';'
;


foreach_statement:
		statement
	|	':' inner_statement_list T_ENDFOREACH ';'
;


declare_statement:
		statement
	|	':' inner_statement_list T_ENDDECLARE ';'
;


declare_list:
		T_STRING '=' static_scalar					{  /* do stuff */  }
	|	declare_list ',' T_STRING '=' static_scalar	{ /* do stuff */  }
;


switch_case_list:
		'{' case_list '}'					{ $$ = $2; }
	|	'{' ';' case_list '}'				{ $$ = $3; }
	|	':' case_list T_ENDSWITCH ';'		{ $$ = $2; }
	|	':' ';' case_list T_ENDSWITCH ';'	{ $$ = $3; }
;


case_list:
		/* empty */	{ /* do stuff */ }
	|	case_list T_CASE expr case_separator { /* do stuff */ } inner_statement_list {  /* do stuff */  }
	|	case_list T_DEFAULT case_separator {  /* do stuff */  } inner_statement_list {  /* do stuff */ }
;


case_separator:
		':'
	|	';'
;


while_statement:
		statement
	|	':' inner_statement_list T_ENDWHILE ';'
;



elseif_list:
		/* empty */
	|	elseif_list T_ELSEIF '(' expr ')' {  /* do stuff */  } statement {  /* do stuff */  }
;


new_elseif_list:
		/* empty */
	|	new_elseif_list T_ELSEIF '(' expr ')' ':' {  /* do stuff */  } inner_statement_list {  /* do stuff */  }
;


else_single:
		/* empty */
	|	T_ELSE statement
;


new_else_single:
		/* empty */
	|	T_ELSE ':' inner_statement_list
;


parameter_list: 
		non_empty_parameter_list
	|	{ $$ = array(); }/* empty */
;


non_empty_parameter_list:
		T_VARIABLE				{  $$ = array(array('var'=>$1)); }
	|	'&' T_VARIABLE			{  $$ = array(array('var'=>$2,'byRef'=>true)); }
	|	T_CONST T_VARIABLE 		{   /* do stuff */  }
	|	T_VARIABLE '=' static_scalar				{   $$ = array(array('var'=>$1,'default'=>$3)); }
	|	non_empty_parameter_list ',' T_VARIABLE 	{   $$ = array_merge($1,array(array('var'=>$3)));  }
	|	non_empty_parameter_list ',' '&' T_VARIABLE	{   $$ = array_merge($1,array(array('var'=>$3,'byRef'=>true))); }
	|	non_empty_parameter_list ',' T_CONST T_VARIABLE				{    }
	|	non_empty_parameter_list ',' T_VARIABLE '=' static_scalar 	{   $$ = array_merge($1,array(array('var'=>$3,'default'=>$5)));  }
;


function_call_parameter_list:
		non_empty_function_call_parameter_list	{ $$ = $1; }
	|	/* empty */				{  /* do stuff */  }
;


non_empty_function_call_parameter_list:
		expr_without_variable	{  /* do stuff */  }
	|	cvar					{  /* do stuff */ }
	|	'&' w_cvar 				{  /* do stuff */ }
	|	non_empty_function_call_parameter_list ',' expr_without_variable	{  /* do stuff */ }
	|	non_empty_function_call_parameter_list ',' cvar						{  /* do stuff */ }
	|	non_empty_function_call_parameter_list ',' '&' w_cvar				{  /* do stuff */ }
;

global_var_list:
		global_var_list ',' global_var	{  /* do stuff */ }
	|	global_var						{  /* do stuff */ }
;


global_var:
		T_VARIABLE			{ $$ = $1; }
	|	'$' r_cvar			{ $$ = $2; }
	|	'$' '{' expr '}'	{ $$ = $3; }
;


static_var_list:
		static_var_list ',' T_VARIABLE {  /* do stuff */ }
	|	static_var_list ',' T_VARIABLE '=' static_scalar {  /* do stuff */ }
	|	T_VARIABLE  {  /* do stuff */ }
	|	T_VARIABLE '=' static_scalar {  /* do stuff */ }

;


class_statement_list:
		class_statement_list class_statement {   }
	|	{  }
;


class_statement:
		T_VAR class_variable_decleration ';' {   }
	|	T_FUNCTION {  
                $this->functionLine = $this->yyLex->line; 
                $this->functionPos = $this->yyLex->pos; 
                $this->functionComment = $this->yyLex->lastComment;/* do stuff */
                $this->functionCommentToken = $this->yyLex->lastCommentToken;/* do stuff */
            } is_reference T_STRING {  /* do stuff */ } '(' 
			parameter_list ')' {  /* do stuff */ }  '{' inner_statement_list '}' { 
                $this->methods[$4] = array( 
                    'name'=>$4,
                    'args'=>$7, 
                    'line'=>$this->functionLine,
                    'startToken'=>$this->functionPos,
                    'endToken'=>$this->yyLex->pos,
                    'comment' => $this->functionComment
                    
                    ); 
                if ($this->functionCommentToken > -1) {
                    $this->methods[$4]['commentToken'] = $this->functionCommentToken;
                }
            }
	|	T_OLD_FUNCTION { /* do stuff */  } is_reference T_STRING {  /* do stuff */ }
			parameter_list '(' inner_statement_list ')' ';' {  /* do stuff */ }

;

is_reference:
		/* empty */	 
	|	'&'			 
;

class_variable_decleration:
		class_variable_decleration ',' T_VARIABLE					{  
                $this->vars[$3] = array(
                    'name'=>$3,
                    'comment' => $this->yyLex->lastComment,
                    'commentToken' => $this->yyLex->lastCommentToken,
                    'line'  => $this->yyLex->line,
                    'token' => $this->yyLex->pos,
                    
                ); 
        }
	|	class_variable_decleration ',' T_VARIABLE  { 
                $this->varStartLine = $this->yyLex->line; 
                $this->varStartToken = $this->yyLex->pos; 
        } 
        '=' static_scalar	{  
                $this->vars[$3] = array(
                    'name'=>$3,
                    'value'=>$6,
                    'comment' => $this->yyLex->lastComment,
                    'commentToken' => $this->yyLex->lastCommentToken,
                    'line'  => $this->varStartLine,
                    'token' => $this->varStartToken,
                ); 
        }
	|	T_VARIABLE						{  
                $this->vars[$1] = array(
                    'name'=>$1 ,
                    'comment' => $this->yyLex->lastComment,
                    'commentToken' => $this->yyLex->lastCommentToken,
                    'line'  => $this->yyLex->line,
                    'token' => $this->yyLex->pos,
                );
        }
	|	T_VARIABLE { 
                $this->varStartLine = $this->yyLex->line; 
                $this->varStartToken = $this->yyLex->pos; 
        } 
        '=' static_scalar	{  
                $this->vars[$1] = array(
                    'name'=>$1,
                    'value'=>$4,
                    'comment' => $this->yyLex->lastComment,
                    'commentToken' => $this->yyLex->lastCommentToken,
                    'line'  => $this->varStartLine,
                    'token' => $this->varStartToken,
                ); 
        }
;


echo_expr_list:	
	|	echo_expr_list ',' expr  
	|	expr					 
;


for_expr:
		/* empty */			 
	|	non_empty_for_expr	{ $$ = $1; }
;

non_empty_for_expr:
		non_empty_for_expr ','	{  /* do stuff */  } expr { $$ = $4; }
	|	expr					{ $$ = $1; }
;


expr_without_variable:	
		T_LIST '(' {  /* do stuff */  } assignment_list ')' '=' expr {  /* do stuff */  }
	|	cvar '=' expr		{  /* do stuff */  }
	|	cvar '=' '&' w_cvar	{  /* do stuff */  }
	|	cvar '=' '&' function_call {  /* do stuff */  }
	|	cvar '=' '&' T_NEW static_or_variable_string  ctor_arguments {
            //echo "New:  ".$5."\n";
            //var_dump($1);
            // store a variable type.
            if (is_array($1) && ($1[0] == '$this') && (count($1) == 2))  {
                if ($5{0} != '$') {
                    $this->referencedVars[$1[1]] = $5;
                } else {
                    // since all classes extend stdclass in theory...
                    $this->referencedVars[$1[1]] = 'StdClass';
                }
            } 
        }
	|	cvar '=' T_NEW static_or_variable_string  ctor_arguments { 
            // store a variable type.
            if (is_array($1) && ($1[0] == '$this') && (count($1) == 2))  {
                if ($4{0} != '$') {
                    $this->referencedVars[$1[1]] = $3;
                } else {
                    // since all classes extend stdclass in theory...
                    $this->referencedVars[$1[1]] = 'StdClass';
                }
            }
        }
    |	T_NEW static_or_variable_string  ctor_arguments { 
            //echo "(no assign?) New:  ".$2."\n";
        }

	|	cvar T_PLUS_EQUAL expr 	{  /* do stuff */ }
	|	cvar T_MINUS_EQUAL expr	{  /* do stuff */ }
	|	cvar T_MUL_EQUAL expr		{  /* do stuff */ }
	|	cvar T_DIV_EQUAL expr		{  /* do stuff */ }
	|	cvar T_CONCAT_EQUAL expr	{  /* do stuff */ }
	|	cvar T_MOD_EQUAL expr		{  /* do stuff */ }
	|	cvar T_AND_EQUAL expr		{  /* do stuff */ }
	|	cvar T_OR_EQUAL expr 		{  /* do stuff */ }
	|	cvar T_XOR_EQUAL expr 		{  /* do stuff */ }
	|	cvar T_SL_EQUAL expr	{  /* do stuff */ } 
	|	cvar T_SR_EQUAL expr	{  /* do stuff */ } 
	|	rw_cvar T_INC {  /* do stuff */ }
	|	T_INC rw_cvar {  /* do stuff */ }
	|	rw_cvar T_DEC {  /* do stuff */ }
	|	T_DEC rw_cvar {  /* do stuff */  }
	|	expr T_BOOLEAN_OR {  /* do stuff */  } expr {  /* do stuff */ }
	|	expr T_BOOLEAN_AND {  /* do stuff */  } expr {  /* do stuff */ }  
	|	expr T_LOGICAL_OR {  /* do stuff */  } expr {  /* do stuff */ }
	|	expr T_LOGICAL_AND {  /* do stuff */  } expr {  /* do stuff */  }
	|	expr T_LOGICAL_XOR expr {  /* do stuff */ }
	|	expr '|' expr	{  /* do stuff */   }
	|	expr '&' expr	{  /* do stuff */ }
	|	expr '^' expr	{  /* do stuff */  }
	|	expr '.' expr 	{  /* do stuff */  }
	|	expr '+' expr 	{  /* do stuff */  }
	|	expr '-' expr 	{  /* do stuff */  }
	|	expr '*' expr	{  /* do stuff */  }
	|	expr '/' expr	{  /* do stuff */  }
	|	expr '%' expr 	{  /* do stuff */  }
	| 	expr T_SL expr	{  /* do stuff */ }
	|	expr T_SR expr	{  /* do stuff */ }
	|	'+' expr {  /* do stuff */  }
	|	'-' expr { /* do stuff */ }
	|	'!' expr {  /* do stuff */  }
	|	'~' expr {  /* do stuff */ }
	|	expr T_IS_IDENTICAL expr		{  /* do stuff */  }
	|	expr T_IS_NOT_IDENTICAL expr	{  /* do stuff */  }
	|	expr T_IS_EQUAL expr			{  /* do stuff */  }
	|	expr T_IS_NOT_EQUAL expr 		{  /* do stuff */  }
	|	expr '<' expr 					{  /* do stuff */  }
	|	expr T_IS_SMALLER_OR_EQUAL expr {  /* do stuff */  }
	|	expr '>' expr 					{  /* do stuff */  }
	|	expr T_IS_GREATER_OR_EQUAL expr {  /* do stuff */  }
	|	'(' expr ')' 	{ $$ = $2; }
	|	expr '?' {  /* do stuff */  }
		expr ':' {  /* do stuff */  }
		expr	 { /* do stuff */  }
	|	function_call { $$ = $1; }
	|	internal_functions_in_yacc { $$ = $1; }
	|	T_INT_CAST expr 	{  /* do stuff */  }
	|	T_DOUBLE_CAST expr 	{  /* do stuff */  }
	|	T_STRING_CAST expr	{  /* do stuff */  }
	|	T_ARRAY_CAST expr 	{   /* do stuff */  }
	|	T_OBJECT_CAST expr 	{  /* do stuff */  }
	|	T_BOOL_CAST expr	{  /* do stuff */  }
	|	T_UNSET_CAST expr	{  /* do stuff */  }
	|	T_EXIT exit_expr	{  /* do stuff */  }
	|	'@' { /* do stuff */ } expr { /* do stuff */ }
	|	scalar				{ $$ = $1; }
	|	T_ARRAY '(' array_pair_list ')' { $$ = 'Array ('.$3.')'; }
	|	'`' encaps_list '`'		{ /* do stuff */ }
	|	T_PRINT expr  { /* do stuff */ }
;

function_call:
		T_STRING	'(' { /* do stuff */ }
				function_call_parameter_list
				')' { /* do stuff */ }
	|	cvar '(' { /* do stuff */ } 
				function_call_parameter_list 
				')' { /* do stuff */ }
	|	T_STRING T_PAAMAYIM_NEKUDOTAYIM static_or_variable_string '(' { /* do stuff */} 
											function_call_parameter_list 
											')' { /* do stuff */ }
;


static_or_variable_string:
		T_STRING	{ $$ = $1; }
	|	r_cvar		{ $$ = $1; }
;


exit_expr:
		/* empty */	{ /* do stuff */ }	
	|	'(' ')'		{ /* do stuff */}	
	|	'(' expr ')'	{ $$ = $2; }
;


ctor_arguments:
		/* empty */	{ /* do stuff */}
	|	'(' function_call_parameter_list ')'	{ $$ = $2; }
;


common_scalar:
		T_LNUMBER 					{ $$ = $1; }
	|	T_DNUMBER 					{ $$ = $1; }
	|	T_CONSTANT_ENCAPSED_STRING	{ $$ = $1; }
	|	T_LINE 						{ $$ = $1; }
	|	T_FILE 						{ $$ = $1; }
	|	T_CLASS_C					{ $$ = $1; }
	|	T_FUNC_C					{ $$ = $1; }
;


static_scalar: /* compile-time evaluated scalars */
		common_scalar		{ $$ = $1; }
	|	T_STRING 		{ /* do stuff */ }
	|	'+' static_scalar	{ $$ = $2; }
	|	'-' static_scalar	{ /* do stuff */}
	|	T_ARRAY '(' static_array_pair_list ')' { $$= 'Array ('.$3.')'; }
;


scalar:
		T_STRING 				{ /* do stuff */ }
	|	T_STRING_VARNAME		{ $$ = $1; }
	|	common_scalar			{ $$ = $1; }
	|	'"' encaps_list '"' 	{ $$ = $2; }
	|	'\'' encaps_list '\''	{ $$ = $2; }
	|	T_START_HEREDOC encaps_list T_END_HEREDOC { /* do stuff */}
;


static_array_pair_list:
		/* empty */ { $$ = ''; }
	|	non_empty_static_array_pair_list possible_comma	{ $$ = $1 . $2; }
;

possible_comma:
		{ $$ = ''; }
	|	','
;

non_empty_static_array_pair_list:
		non_empty_static_array_pair_list ',' static_scalar T_DOUBLE_ARROW static_scalar	{ $$ = $1 .','.$3 . '=>' . $5; }
	|	non_empty_static_array_pair_list ',' static_scalar { $$ = $1 .','.$3; }
	|	static_scalar T_DOUBLE_ARROW static_scalar { $$ = $1 .'=>'.$3; }
	|	static_scalar { /* do stuff */}
;

expr:
		r_cvar					{ $$ = $1; }
	|	expr_without_variable	{ $$ = $1; }
;


r_cvar:
	cvar {   $$ = $1; }
;


w_cvar:
	cvar {   $$ = $1; }
;


rw_cvar:
	cvar {   $$ = $1; }
;


cvar:
		cvar_without_objects {  $$ = $1; }
	|	cvar_without_objects T_OBJECT_OPERATOR ref_list { 
        
            $$ = array_merge(array($1),$3);
            
            if ((count($3) == 1) && ($1 == '$this')  && (empty($this->referencedVars[$3[0]]))) {
                $this->referencedVars[$3[0]] = true;
            }
            
             
    }
;


cvar_without_objects:
		reference_variable { $$ = $1; }
	|	simple_indirect_reference reference_variable { $$ = $1 . $2; }
;


reference_variable:
		reference_variable '[' dim_offset ']'	{ $$ = $1 . '['.$3.']'; }
	|	reference_variable '{' expr '}'		{ $$ = $1 . '{'.$3.'}'; }
	|	compound_variable			
;
	

compound_variable:
		T_VARIABLE			{ $$ = $1; }
	|	'$' '{' expr '}'	{ $$ = '${'.$3.'}'; }
;

dim_offset:
		/* empty */		
	|	expr			{ $$ = $1; }
;

ref_list:
		object_property  { $$ = array($1); }
	|	ref_list T_OBJECT_OPERATOR  object_property { $$ = array_merge($1,array($3)); }
;

object_property:
		object_dim_list { $$ = $1; }
	|	cvar_without_objects   { $$ = $1; }
;

object_dim_list:
		object_dim_list '[' dim_offset ']'	{ $$ = $1 . '['.$3.']'; }
	|	object_dim_list '{' expr '}'		{  $$ = $1 . '{'.$3.'}'; }
	|	variable_name { /* do stuff */ }
;

variable_name:
		T_STRING		{ $$ = $1; }
	|	'{' expr '}'	{ $$ = $2; }
;


simple_indirect_reference:
		'$' { /* do stuff */; }
	|	simple_indirect_reference '$' { /* do stuff */ }
;

assignment_list:
		assignment_list ',' assignment_list_element
	|	assignment_list_element
;


assignment_list_element:
		cvar								
	|	T_LIST '('  assignment_list ')'	{ $$ = 'list('.$3.')';}
	|	/* empty */						 
;


array_pair_list:
		/* empty */  
	|	non_empty_array_pair_list possible_comma	{ $$ = $1 . $2; }
;

non_empty_array_pair_list:
		non_empty_array_pair_list ',' expr T_DOUBLE_ARROW expr	{ /* do stuff */}
	|	non_empty_array_pair_list ',' expr			{ /* do stuff */ }
	|	expr T_DOUBLE_ARROW expr	{/* do stuff */ }
	|	expr 				{ /* do stuff */ }
	|	non_empty_array_pair_list ',' expr T_DOUBLE_ARROW '&' w_cvar { /* do stuff */ }
	|	non_empty_array_pair_list ',' '&' w_cvar { /* do stuff */ }
	|	expr T_DOUBLE_ARROW '&' w_cvar	{ /* do stuff */ }
	|	'&' w_cvar 			{ /* do stuff */}
;

encaps_list:
		encaps_list encaps_var          {/* do stuff */ }
	|	encaps_list T_STRING			{ /* do stuff */}
	|	encaps_list T_NUM_STRING		{ /* do stuff */ }
	|	encaps_list T_ENCAPSED_AND_WHITESPACE	{ /* do stuff */ }
	|	encaps_list T_CHARACTER 		{ /* do stuff */ }
	|	encaps_list T_BAD_CHARACTER		{ /* do stuff */ }
	|	encaps_list '['		{ /* do stuff */}
	|	encaps_list ']'		{ /* do stuff */}
	|	encaps_list '{'		{ /* do stuff */}
	|	encaps_list '}'		{ /* do stuff */ }
	|	encaps_list T_OBJECT_OPERATOR  {/* do stuff */ }
	|	/* empty */			{ /* do stuff */ }

;



encaps_var:
		T_VARIABLE { /* do stuff */}
	|	T_VARIABLE '[' { /* do stuff */}
	|	T_VARIABLE T_OBJECT_OPERATOR T_STRING { /* do stuff */}
	|	T_DOLLAR_OPEN_CURLY_BRACES expr '}' { /* do stuff */}
	|	T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME '[' expr ']' '}' { /* do stuff */ }
	|	T_CURLY_OPEN cvar '}' { $$ = $2; }
;


encaps_var_offset:
		T_STRING		{ $$ = $1; }
	|	T_NUM_STRING	{ $$ = $1; }
	|	T_VARIABLE		{ /* do stuff */}
;


internal_functions_in_yacc:
		T_ISSET '(' isset_variables ')' { $$ = $3; }
	|	T_EMPTY '(' cvar ')'	{ /* do stuff */}
	|	T_INCLUDE expr 			{ $this->includes[] = $2; }
	|	T_INCLUDE_ONCE expr 	{ $this->includes[] = $2; }
	|	T_EVAL '(' expr ')' 	{ /* do stuff */ }
	|	T_REQUIRE expr			{ $this->includes[] = $2; }
	|	T_REQUIRE_ONCE expr		{ $this->includes[] = $2; }
;

isset_variables:
		cvar 				{ /* do stuff */}
	|	isset_variables ',' { /* do stuff */} cvar { /* do stuff */}
;	

%%


}
